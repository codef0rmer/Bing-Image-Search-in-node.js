var path = require('path');
var url = require('url');
var http = require('http');
var fs = require('fs');
var im = require('imagemagick');

var write_file;
var complete = false;
var content_length = 0;
var downloaded_bytes = 0;

var Downloader = function() {
    this.set_remote_file = function(file, store_at) {
        remote_file = file;
        local_file = path.basename( remote_file );
        venue = store_at;
    }

    this.run = function(callback) {
        this.download( remote_file, local_file, venue, 0 , callback);
    }

    this.download = function(remote, local, store_at, num, callback) {
        console.log( remote );
        if ( num > 10 ) {
            console.log( 'Too many redirects' );
        }
        var self = this;
        var redirect = false;
        var new_remote = null;
        var write_to_file = false;
        var write_file_ready = false;
        var u = url.parse(remote);
        var opts = {
            host: u.hostname,
            port: u.port,
            path: u.pathname
        };
        var request = http.get(opts, function(response ) {
            switch(response.statusCode) {
                case 200:
                    content_length = response.headers['content-length'];
                    break;
                case 302:
                    new_remote = response.headers.location;
                    self.download(new_remote, local_file, venue, num+1 );
                    return;
                    break;
                case 404:
                    console.log("File Not Found");
                default:
                    request.abort();
                    return;
            }
            response.on('data', function(chunk) {
                if(!write_file_ready) {
                    write_file = fs.createWriteStream(venue+local_file);
                    write_file_ready = true;
                }
                write_file.write(chunk);
                downloaded_bytes+=chunk.length;
                percent = parseInt( (downloaded_bytes/content_length)*100 );
                console.log('Download progress: ' + percent + '%' );
            });
            response.on('end', function() {
                complete = true;
                write_file.end();
                
                im.crop({
					srcPath: venue+local_file,
					dstPath: venue+'100X100_'+local_file,
					width: 100,
					quality: 1
				}, function(err, stdout, stderr){
					if (err) {
						console.log(err);
						console.log('Cropping Failed');
					} else {
						console.log("Finished Cropping " + '100X100_'+local_file);
					}
				});

                new mongodb.Db(MONGODB_NAME, new mongodb.Server('localhost', MONGODB_PORT, {}), {}).open(function (error, client) {
                    if (error) throw error;
                    var collection = new mongodb.Collection(client, COLLECTION_NAME);
                    collection.insert({image: '100X100_'+local_file}, {safe:true},
                        function(err, objects) {
                            if (err) throw err;
                            console.log('Saved in mongoDB '+'100X100_'+local_file);
                            callback();
                        }
                    );
                });
            });
        });
        request.on('error', function(e) {
            console.log("Got error: " + e.message);
        });
    }
}
exports.Downloader = Downloader;
